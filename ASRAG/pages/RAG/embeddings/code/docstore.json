{"docstore/data": {"d3fdd05c-1106-4c47-b71f-36cce41c7f7f": {"__data__": {"id_": "d3fdd05c-1106-4c47-b71f-36cce41c7f7f", "embedding": null, "metadata": {"file_path": "D:\\Akhil_Main_LLM_Code\\Akhil_Main_LLM_Code\\ASRAG\\pages\\RAG\\code\\app3.py", "file_name": "app3.py", "file_type": "text/x-python", "file_size": 10460, "creation_date": "2024-04-19", "last_modified_date": "2024-04-19"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f629a58b-5884-4f66-9c05-9b0dbde66211", "node_type": "4", "metadata": {"file_path": "D:\\Akhil_Main_LLM_Code\\Akhil_Main_LLM_Code\\ASRAG\\pages\\RAG\\code\\app3.py", "file_name": "app3.py", "file_type": "text/x-python", "file_size": 10460, "creation_date": "2024-04-19", "last_modified_date": "2024-04-19"}, "hash": "92fe818292d1d6713f30fcdd13cddd4b0b55e6cb016b214db2123a3c88a62cd1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4983416a-ef8c-4da4-a4b2-1f79d1e8e60c", "node_type": "1", "metadata": {}, "hash": "a898d7002b33767d66c13d0ee73f5661d2f2f7ff5029d225c351bc278d4341a6", "class_name": "RelatedNodeInfo"}}, "text": "import evaluate, json, numpy, torch\r\nfrom sklearn.model_selection import train_test_split\r\nfrom transformers import DistilBertTokenizerFast, BertTokenizerFast, AlbertTokenizerFast, AutoModelForSequenceClassification\r\nfrom transformers import DistilBertForSequenceClassification, Trainer, TrainingArguments, BertForSequenceClassification, AlbertForSequenceClassification\r\nfrom transformers import GPT2ForSequenceClassification, XLNetForSequenceClassification, XLNetTokenizer\r\nfrom torch.nn import functional as F\r\n\r\nfrom transformers import set_seed\r\n\r\nfrom transformers import GPT2Tokenizer\r\nimport re\r\n\r\nset_seed(2023)\r\n\r\ntext_form=\"em_mc\"\r\ntext_form=\"em\"\r\n\r\n\r\ndevice = \"cuda:0\" if torch.cuda.is_available() else \"cpu\"\r\n#print(\"device is:\",device)\r\n\r\n#tokenizer = DistilBertTokenizerFast.from_pretrained('distilbert-base-uncased')\r\n\r\n# tokenizer = DistilBertTokenizerFast.from_pretrained('distilbert-base-uncased')\r\n\r\n#tokenizer = GPT2Tokenizer.from_pretrained(\"gpt2\")\r\n#tokenizer.pad_token = tokenizer.eos_token\r\n\r\n#tokenizer = XLNetTokenizer.from_pretrained('xlnet-base-cased')\r\n\r\nmetric = evaluate.load(\"accuracy\")\r\n\r\ndef compute_metrics(eval_pred):\r\n    logits, labels = eval_pred\r\n    predictions = numpy.argmax(logits, axis=-1)\r\n    return metric.compute(predictions=predictions, references=labels)\r\n\r\n\r\ndef save_jsonline(data,savepath):\r\n    print(\"data is\",data)\r\n    json_object = json.dumps(str(data), indent=4)\r\n    with open(savepath,'w') as f:\r\n        f.write(json_object)    \r\n    return", "start_char_idx": 0, "end_char_idx": 1503, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4983416a-ef8c-4da4-a4b2-1f79d1e8e60c": {"__data__": {"id_": "4983416a-ef8c-4da4-a4b2-1f79d1e8e60c", "embedding": null, "metadata": {"file_path": "D:\\Akhil_Main_LLM_Code\\Akhil_Main_LLM_Code\\ASRAG\\pages\\RAG\\code\\app3.py", "file_name": "app3.py", "file_type": "text/x-python", "file_size": 10460, "creation_date": "2024-04-19", "last_modified_date": "2024-04-19"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f629a58b-5884-4f66-9c05-9b0dbde66211", "node_type": "4", "metadata": {"file_path": "D:\\Akhil_Main_LLM_Code\\Akhil_Main_LLM_Code\\ASRAG\\pages\\RAG\\code\\app3.py", "file_name": "app3.py", "file_type": "text/x-python", "file_size": 10460, "creation_date": "2024-04-19", "last_modified_date": "2024-04-19"}, "hash": "92fe818292d1d6713f30fcdd13cddd4b0b55e6cb016b214db2123a3c88a62cd1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d3fdd05c-1106-4c47-b71f-36cce41c7f7f", "node_type": "1", "metadata": {"file_path": "D:\\Akhil_Main_LLM_Code\\Akhil_Main_LLM_Code\\ASRAG\\pages\\RAG\\code\\app3.py", "file_name": "app3.py", "file_type": "text/x-python", "file_size": 10460, "creation_date": "2024-04-19", "last_modified_date": "2024-04-19"}, "hash": "ece8be2efe26089d9ed646fe9e4d88ffebaac22c6334fe5eaaa96c2173696f50", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "20a2ecb5-5baf-4ab5-a1dd-2713970f1a68", "node_type": "1", "metadata": {}, "hash": "9c27fcdb5893a4f0b82e4b6f3f35c36fb7e2e953667ab1db76ddcccbafbc8178", "class_name": "RelatedNodeInfo"}}, "text": "def load_data(q_path=\"test/1000_perf_questions.json\",\r\n        a_path=\"test/1000_perf_answers.json\",\r\n        label_path='test/1000_perf_em_list.txt',):\r\n  print(\"label path\",label_path)\r\n  q1 = json.load(open(q_path))\r\n  a1 = json.load(open(a_path))\r\n  labels = numpy.loadtxt(label_path,dtype=int)\r\n  text = list()\r\n  for item in q1:\r\n    id1 = item['_id']\r\n    q_cur = item['query'].split(\"\\n\\n\")[-1]\r\n    ans1 = a1['answer'][id1]\r\n    if(text_form==\"em_mc\"):\r\n        ans1=ans2opt(ans1)\r\n    query = q_cur+\" \"+ans1\r\n    text.append(query)\r\n  return text, labels\r\n  \r\ndef ans2opt(ans1):\r\n    def mc_remove(text):\r\n        a1 = re.findall('\\([a-zA-Z]\\)', text)\r\n        #print(\"text is\",text)\r\n        #print(\"a1\",a1)\r\n        if(len(a1)==0):\r\n            return \"\"\r\n        return re.findall('\\([a-zA-Z]\\)', text)[-1]\r\n    ans2 = mc_remove(ans1)\r\n    return ans2  \r\n\r\nclass IMDbDataset(torch.utils.data.Dataset):\r\n    def __init__(self, encodings, labels):\r\n        self.encodings = encodings\r\n        self.labels = labels\r\n\r\n    def __getitem__(self, idx):\r\n        item = {key: torch.tensor(val[idx]) for key, val in self.encodings.items()}\r\n        item['labels'] = torch.tensor(self.labels[idx])\r\n        return item\r\n\r\n    def __len__(self):\r\n        return len(self.labels)", "start_char_idx": 1508, "end_char_idx": 2789, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "20a2ecb5-5baf-4ab5-a1dd-2713970f1a68": {"__data__": {"id_": "20a2ecb5-5baf-4ab5-a1dd-2713970f1a68", "embedding": null, "metadata": {"file_path": "D:\\Akhil_Main_LLM_Code\\Akhil_Main_LLM_Code\\ASRAG\\pages\\RAG\\code\\app3.py", "file_name": "app3.py", "file_type": "text/x-python", "file_size": 10460, "creation_date": "2024-04-19", "last_modified_date": "2024-04-19"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f629a58b-5884-4f66-9c05-9b0dbde66211", "node_type": "4", "metadata": {"file_path": "D:\\Akhil_Main_LLM_Code\\Akhil_Main_LLM_Code\\ASRAG\\pages\\RAG\\code\\app3.py", "file_name": "app3.py", "file_type": "text/x-python", "file_size": 10460, "creation_date": "2024-04-19", "last_modified_date": "2024-04-19"}, "hash": "92fe818292d1d6713f30fcdd13cddd4b0b55e6cb016b214db2123a3c88a62cd1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4983416a-ef8c-4da4-a4b2-1f79d1e8e60c", "node_type": "1", "metadata": {"file_path": "D:\\Akhil_Main_LLM_Code\\Akhil_Main_LLM_Code\\ASRAG\\pages\\RAG\\code\\app3.py", "file_name": "app3.py", "file_type": "text/x-python", "file_size": 10460, "creation_date": "2024-04-19", "last_modified_date": "2024-04-19"}, "hash": "5c86756121d8423986995de9a3244b446b65f42e494e04b6db2de89a1a63cae9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ca11b5e1-ec17-440b-8d44-84a56e13aa95", "node_type": "1", "metadata": {}, "hash": "25aeca353a5c3854cfb2f5ff011b84ad8abc5940fe8d2425a62b7fa41ca4e72b", "class_name": "RelatedNodeInfo"}}, "text": "class Score(object):", "start_char_idx": 2795, "end_char_idx": 2815, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ca11b5e1-ec17-440b-8d44-84a56e13aa95": {"__data__": {"id_": "ca11b5e1-ec17-440b-8d44-84a56e13aa95", "embedding": null, "metadata": {"file_path": "D:\\Akhil_Main_LLM_Code\\Akhil_Main_LLM_Code\\ASRAG\\pages\\RAG\\code\\app3.py", "file_name": "app3.py", "file_type": "text/x-python", "file_size": 10460, "creation_date": "2024-04-19", "last_modified_date": "2024-04-19"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f629a58b-5884-4f66-9c05-9b0dbde66211", "node_type": "4", "metadata": {"file_path": "D:\\Akhil_Main_LLM_Code\\Akhil_Main_LLM_Code\\ASRAG\\pages\\RAG\\code\\app3.py", "file_name": "app3.py", "file_type": "text/x-python", "file_size": 10460, "creation_date": "2024-04-19", "last_modified_date": "2024-04-19"}, "hash": "92fe818292d1d6713f30fcdd13cddd4b0b55e6cb016b214db2123a3c88a62cd1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "20a2ecb5-5baf-4ab5-a1dd-2713970f1a68", "node_type": "1", "metadata": {"file_path": "D:\\Akhil_Main_LLM_Code\\Akhil_Main_LLM_Code\\ASRAG\\pages\\RAG\\code\\app3.py", "file_name": "app3.py", "file_type": "text/x-python", "file_size": 10460, "creation_date": "2024-04-19", "last_modified_date": "2024-04-19"}, "hash": "96f5d58b1c308e5b639cd073e30867d3825d20b376af5b30635749e944a9c43f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a5d0f2cf-b82e-4e85-bb6b-0dfa013d9212", "node_type": "1", "metadata": {}, "hash": "beb6f2babcc726fcdc583d4282858d445a19946ab103b77de17d572bbd1d2142", "class_name": "RelatedNodeInfo"}}, "text": "def __init__(self,          \r\n                 score_type='DistilBert'):\r\n        if(score_type=='DistilBert'):\r\n            self.tokenizer = DistilBertTokenizerFast.from_pretrained('distilbert-base-uncased')\r\n        if(score_type=='Bert'):\r\n            self.tokenizer = BertTokenizerFast.from_pretrained('bert-base-uncased')\r\n        if(score_type=='AlBert'):\r\n            self.tokenizer = AlbertTokenizerFast.from_pretrained('albert-base-v2')\r\n        self.score_type = score_type\r\n        return", "start_char_idx": 2821, "end_char_idx": 3320, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a5d0f2cf-b82e-4e85-bb6b-0dfa013d9212": {"__data__": {"id_": "a5d0f2cf-b82e-4e85-bb6b-0dfa013d9212", "embedding": null, "metadata": {"file_path": "D:\\Akhil_Main_LLM_Code\\Akhil_Main_LLM_Code\\ASRAG\\pages\\RAG\\code\\app3.py", "file_name": "app3.py", "file_type": "text/x-python", "file_size": 10460, "creation_date": "2024-04-19", "last_modified_date": "2024-04-19"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f629a58b-5884-4f66-9c05-9b0dbde66211", "node_type": "4", "metadata": {"file_path": "D:\\Akhil_Main_LLM_Code\\Akhil_Main_LLM_Code\\ASRAG\\pages\\RAG\\code\\app3.py", "file_name": "app3.py", "file_type": "text/x-python", "file_size": 10460, "creation_date": "2024-04-19", "last_modified_date": "2024-04-19"}, "hash": "92fe818292d1d6713f30fcdd13cddd4b0b55e6cb016b214db2123a3c88a62cd1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ca11b5e1-ec17-440b-8d44-84a56e13aa95", "node_type": "1", "metadata": {"file_path": "D:\\Akhil_Main_LLM_Code\\Akhil_Main_LLM_Code\\ASRAG\\pages\\RAG\\code\\app3.py", "file_name": "app3.py", "file_type": "text/x-python", "file_size": 10460, "creation_date": "2024-04-19", "last_modified_date": "2024-04-19"}, "hash": "97eeb03911ec1b67720985df00698a8e7e68224803b9d879be442bb4b6ae9f32", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "042d7109-b707-48f8-adc3-b97b70e71664", "node_type": "1", "metadata": {}, "hash": "fc78589fd11e74c47e1d6bd887f800f811c4dfeff6de76f2d961e8fe204aefea", "class_name": "RelatedNodeInfo"}}, "text": "def train(self,\r\n              train_texts, \r\n              train_labels,\r\n              #score_type='DistilBert',\r\n              ):", "start_char_idx": 3326, "end_char_idx": 3458, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "042d7109-b707-48f8-adc3-b97b70e71664": {"__data__": {"id_": "042d7109-b707-48f8-adc3-b97b70e71664", "embedding": null, "metadata": {"file_path": "D:\\Akhil_Main_LLM_Code\\Akhil_Main_LLM_Code\\ASRAG\\pages\\RAG\\code\\app3.py", "file_name": "app3.py", "file_type": "text/x-python", "file_size": 10460, "creation_date": "2024-04-19", "last_modified_date": "2024-04-19"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f629a58b-5884-4f66-9c05-9b0dbde66211", "node_type": "4", "metadata": {"file_path": "D:\\Akhil_Main_LLM_Code\\Akhil_Main_LLM_Code\\ASRAG\\pages\\RAG\\code\\app3.py", "file_name": "app3.py", "file_type": "text/x-python", "file_size": 10460, "creation_date": "2024-04-19", "last_modified_date": "2024-04-19"}, "hash": "92fe818292d1d6713f30fcdd13cddd4b0b55e6cb016b214db2123a3c88a62cd1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a5d0f2cf-b82e-4e85-bb6b-0dfa013d9212", "node_type": "1", "metadata": {"file_path": "D:\\Akhil_Main_LLM_Code\\Akhil_Main_LLM_Code\\ASRAG\\pages\\RAG\\code\\app3.py", "file_name": "app3.py", "file_type": "text/x-python", "file_size": 10460, "creation_date": "2024-04-19", "last_modified_date": "2024-04-19"}, "hash": "1396dbb4a6656ee0346209c3f23e0f7d73f3443cf40ffdfb6adbe3f87e2a3f3d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7db12c91-e0c3-451f-9880-55ef46c81830", "node_type": "1", "metadata": {}, "hash": "e68a5445e8e67ff76f643ec35d9f315379f6c8869156b81f359dbb5bb8f4266d", "class_name": "RelatedNodeInfo"}}, "text": "train_texts, val_texts, train_labels, val_labels = train_test_split(train_texts, train_labels, test_size=.6)\r\n        #print(\"train_text 0\",train_texts[0])\r\n        #print(\"val_text 0\",val_texts[0])\r\n        #print(\"----------------------------\")\r\n        tokenizer = self.tokenizer\r\n        train_encodings = tokenizer(train_texts, truncation=True, padding=True,max_length=512)\r\n        val_encodings = tokenizer(val_texts, truncation=True, padding=True,max_length=512)\r\n\r\n        train_dataset = IMDbDataset(train_encodings, train_labels)\r\n        val_dataset = IMDbDataset(val_encodings, val_labels)\r\n\r\n        training_args = TrainingArguments(\r\n    output_dir='./scorer_location',          # output directory\r\n    num_train_epochs=8,              # total number of training epochs\r\n    per_device_train_batch_size=16,  # batch size per device during training\r\n    per_device_eval_batch_size=64,   # batch size for evaluation\r\n    warmup_steps=500,                # number of warmup steps for learning rate scheduler\r\n    weight_decay=0.01,               # strength of weight decay\r\n    logging_dir='./logs',            # directory for storing logs\r\n    logging_steps=10,\r\n    evaluation_strategy=\"epoch\",\r\n\tsave_strategy =\"epoch\",\r\n    load_best_model_at_end=True,\r\n    seed=2023,\r\n    )\r\n        score_type = self.score_type\r\n        if(score_type=='DistilBert'):\r\n            model = DistilBertForSequenceClassification.from_pretrained(\"distilbert-base-uncased\")", "start_char_idx": 3478, "end_char_idx": 4947, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7db12c91-e0c3-451f-9880-55ef46c81830": {"__data__": {"id_": "7db12c91-e0c3-451f-9880-55ef46c81830", "embedding": null, "metadata": {"file_path": "D:\\Akhil_Main_LLM_Code\\Akhil_Main_LLM_Code\\ASRAG\\pages\\RAG\\code\\app3.py", "file_name": "app3.py", "file_type": "text/x-python", "file_size": 10460, "creation_date": "2024-04-19", "last_modified_date": "2024-04-19"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f629a58b-5884-4f66-9c05-9b0dbde66211", "node_type": "4", "metadata": {"file_path": "D:\\Akhil_Main_LLM_Code\\Akhil_Main_LLM_Code\\ASRAG\\pages\\RAG\\code\\app3.py", "file_name": "app3.py", "file_type": "text/x-python", "file_size": 10460, "creation_date": "2024-04-19", "last_modified_date": "2024-04-19"}, "hash": "92fe818292d1d6713f30fcdd13cddd4b0b55e6cb016b214db2123a3c88a62cd1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "042d7109-b707-48f8-adc3-b97b70e71664", "node_type": "1", "metadata": {"file_path": "D:\\Akhil_Main_LLM_Code\\Akhil_Main_LLM_Code\\ASRAG\\pages\\RAG\\code\\app3.py", "file_name": "app3.py", "file_type": "text/x-python", "file_size": 10460, "creation_date": "2024-04-19", "last_modified_date": "2024-04-19"}, "hash": "bbf1d77baa61e937802e0c2c1a28e157c030963b2cb083ecd722bc40e13cfba4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "50e776c4-771e-4a77-bde6-8ec382b0acd2", "node_type": "1", "metadata": {}, "hash": "0dbd10e13339e2b781f5cbd214f8e9fe933bad41431c60f6b5941e920c7faf43", "class_name": "RelatedNodeInfo"}}, "text": "if(score_type=='Bert'):\r\n            model = BertForSequenceClassification.from_pretrained(\"bert-base-uncased\")\r\n        if(score_type=='AlBert'):\r\n            model = AlbertForSequenceClassification.from_pretrained(\"albert-base-v2\")\r\n\r\n        #model = GPT2ForSequenceClassification.from_pretrained(\"gpt2\")\r\n        #model = XLNetForSequenceClassification.from_pretrained(\"xlnet-base-cased\")\r\n\r\n        model = model.to(device)\r\n        trainer = Trainer(\r\n    model=model,                         # the instantiated \ud83e\udd17 Transformers model to be trained\r\n    args=training_args,                  # training arguments, defined above\r\n    train_dataset=train_dataset,         # training dataset\r\n    eval_dataset=val_dataset ,            # evaluation dataset\r\n    compute_metrics=compute_metrics,\r\n\r\n        )\r\n\r\n        trainer.train()\r\n        self.trainer = trainer\r\n        self.model = model\r\n        return model", "start_char_idx": 4957, "end_char_idx": 5872, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "50e776c4-771e-4a77-bde6-8ec382b0acd2": {"__data__": {"id_": "50e776c4-771e-4a77-bde6-8ec382b0acd2", "embedding": null, "metadata": {"file_path": "D:\\Akhil_Main_LLM_Code\\Akhil_Main_LLM_Code\\ASRAG\\pages\\RAG\\code\\app3.py", "file_name": "app3.py", "file_type": "text/x-python", "file_size": 10460, "creation_date": "2024-04-19", "last_modified_date": "2024-04-19"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f629a58b-5884-4f66-9c05-9b0dbde66211", "node_type": "4", "metadata": {"file_path": "D:\\Akhil_Main_LLM_Code\\Akhil_Main_LLM_Code\\ASRAG\\pages\\RAG\\code\\app3.py", "file_name": "app3.py", "file_type": "text/x-python", "file_size": 10460, "creation_date": "2024-04-19", "last_modified_date": "2024-04-19"}, "hash": "92fe818292d1d6713f30fcdd13cddd4b0b55e6cb016b214db2123a3c88a62cd1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7db12c91-e0c3-451f-9880-55ef46c81830", "node_type": "1", "metadata": {"file_path": "D:\\Akhil_Main_LLM_Code\\Akhil_Main_LLM_Code\\ASRAG\\pages\\RAG\\code\\app3.py", "file_name": "app3.py", "file_type": "text/x-python", "file_size": 10460, "creation_date": "2024-04-19", "last_modified_date": "2024-04-19"}, "hash": "fe9eba6e9392603e1b52697a42bf4568c95757aef0ecf7074cc187eb2d1dcfab", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bd0d2e59-723b-4176-81f0-f07e44b0474f", "node_type": "1", "metadata": {}, "hash": "0fb5a4c5d01bc0c125f04f4ca9badee23927e5004ebf29d3e55591e98fb49c89", "class_name": "RelatedNodeInfo"}}, "text": "def predict(self,\r\n                model,text):\r\n        #trainer = self.trainer\r\n        model = self.model\r\n        encoding = self.tokenizer(text, return_tensors=\"pt\",truncation=True, padding=True)\r\n        encoding = {k: v.to(model.device) for k,v in encoding.items()}\r\n        outputs = model(**encoding)\r\n        logit_score = outputs.logits.cpu().detach()\r\n        #return logit_score\r\n        # convert logit score to torch array\r\n        torch_logits = logit_score\r\n        \r\n        # get probabilities using softmax from logit score and convert it to numpy array\r\n        probabilities_scores = F.softmax(torch_logits, dim = -1).numpy()[0]\r\n\r\n        return probabilities_scores\r\n    \r\n    def get_model(self):\r\n        return self.model\r\n\r\n    def get_score(self,text):\r\n        prob = self.predict(\"\",text)\r\n        return prob[1]\r\n\r\n    def gen_score(self,\r\n                  model,\r\n                  texts,\r\n                  ):\r\n        scores = list()\r\n        for text in texts:\r\n            prob = self.predict(model,text)\r\n            scores.append(prob[1])\r\n        return scores\r\n    def save(self,savepath):\r\n        self.trainer.save_model(savepath)\r\n        return\r\n\r\n    def load(self,loadpath):\r\n        self.model = AutoModelForSequenceClassification.from_pretrained(loadpath)\r\n        return", "start_char_idx": 5884, "end_char_idx": 7205, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bd0d2e59-723b-4176-81f0-f07e44b0474f": {"__data__": {"id_": "bd0d2e59-723b-4176-81f0-f07e44b0474f", "embedding": null, "metadata": {"file_path": "D:\\Akhil_Main_LLM_Code\\Akhil_Main_LLM_Code\\ASRAG\\pages\\RAG\\code\\app3.py", "file_name": "app3.py", "file_type": "text/x-python", "file_size": 10460, "creation_date": "2024-04-19", "last_modified_date": "2024-04-19"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f629a58b-5884-4f66-9c05-9b0dbde66211", "node_type": "4", "metadata": {"file_path": "D:\\Akhil_Main_LLM_Code\\Akhil_Main_LLM_Code\\ASRAG\\pages\\RAG\\code\\app3.py", "file_name": "app3.py", "file_type": "text/x-python", "file_size": 10460, "creation_date": "2024-04-19", "last_modified_date": "2024-04-19"}, "hash": "92fe818292d1d6713f30fcdd13cddd4b0b55e6cb016b214db2123a3c88a62cd1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "50e776c4-771e-4a77-bde6-8ec382b0acd2", "node_type": "1", "metadata": {"file_path": "D:\\Akhil_Main_LLM_Code\\Akhil_Main_LLM_Code\\ASRAG\\pages\\RAG\\code\\app3.py", "file_name": "app3.py", "file_type": "text/x-python", "file_size": 10460, "creation_date": "2024-04-19", "last_modified_date": "2024-04-19"}, "hash": "05e92247de1345c8a31c200fab671eddff28ebcb2b8f995b12bfde8e651d0d7d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9fa4b9a6-1915-4b35-a229-62f3d7f57c9a", "node_type": "1", "metadata": {}, "hash": "5fa6190415dfbc7882d9d510be2b808276427da10dc078fca5ec156237c2cf35", "class_name": "RelatedNodeInfo"}}, "text": "def save_scores(self,\r\n                    q_path,\r\n                    score_path,\r\n                    scores):\r\n        q1 = json.load(open(q_path))\r\n        result = dict()\r\n        i = 0\r\n        for item in q1:\r\n            id1 = item['_id']\r\n            result[id1] = scores[i]\r\n            i+=1\r\n        save_jsonline(data=result, savepath=score_path)    \r\n        return", "start_char_idx": 7211, "end_char_idx": 7590, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9fa4b9a6-1915-4b35-a229-62f3d7f57c9a": {"__data__": {"id_": "9fa4b9a6-1915-4b35-a229-62f3d7f57c9a", "embedding": null, "metadata": {"file_path": "D:\\Akhil_Main_LLM_Code\\Akhil_Main_LLM_Code\\ASRAG\\pages\\RAG\\code\\app3.py", "file_name": "app3.py", "file_type": "text/x-python", "file_size": 10460, "creation_date": "2024-04-19", "last_modified_date": "2024-04-19"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f629a58b-5884-4f66-9c05-9b0dbde66211", "node_type": "4", "metadata": {"file_path": "D:\\Akhil_Main_LLM_Code\\Akhil_Main_LLM_Code\\ASRAG\\pages\\RAG\\code\\app3.py", "file_name": "app3.py", "file_type": "text/x-python", "file_size": 10460, "creation_date": "2024-04-19", "last_modified_date": "2024-04-19"}, "hash": "92fe818292d1d6713f30fcdd13cddd4b0b55e6cb016b214db2123a3c88a62cd1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bd0d2e59-723b-4176-81f0-f07e44b0474f", "node_type": "1", "metadata": {"file_path": "D:\\Akhil_Main_LLM_Code\\Akhil_Main_LLM_Code\\ASRAG\\pages\\RAG\\code\\app3.py", "file_name": "app3.py", "file_type": "text/x-python", "file_size": 10460, "creation_date": "2024-04-19", "last_modified_date": "2024-04-19"}, "hash": "9d277cfc9cedd1116f1f8b90bd29e10be8bfd8c85935ad0e5101d5e1741b2bee", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "edb0d1ad-abd2-492f-83d7-81ded02bb359", "node_type": "1", "metadata": {}, "hash": "05f02ed96bbc57b93289b60afd8fe089c344bbec6dc7f9f4ce465d4b327e0f0c", "class_name": "RelatedNodeInfo"}}, "text": "def pipelines(self,\r\n                  train_q_path,\r\n                  train_a_path,\r\n                  train_label_path,\r\n                  train_score_path,\r\n                  \r\n                  val_q_path,\r\n                  val_a_path,\r\n                  val_label_path,\r\n                  val_score_path,\r\n                  \r\n                  test_q_path,\r\n                  test_a_path,\r\n                  test_label_path,\r\n                  test_score_path,\r\n                  ):\r\n        # generate data\r\n        train_texts, train_labels = load_data(\r\n                q_path=train_q_path,\r\n                a_path=train_a_path,\r\n                label_path=train_label_path)\r\n\r\n        test_texts, test_labels = load_data(\r\n                q_path=test_q_path,\r\n                a_path=test_a_path,\r\n                label_path=test_label_path)\r\n\r\n        val_texts, val_labels = load_data(\r\n                q_path=val_q_path,\r\n                a_path=val_a_path,\r\n                label_path=val_label_path)\r\n        \r\n        # train the model\r\n        model = self.train(train_texts, train_labels)\r\n        \r\n        # get scores \r\n        scores = self.gen_score(model,test_texts)\r\n        self.save_scores(test_q_path,test_score_path,scores)\r\n        scores = self.gen_score(model,val_texts)\r\n        self.save_scores(val_q_path,val_score_path,scores)\r\n        scores = self.gen_score(model,train_texts)\r\n        self.save_scores(train_q_path,train_score_path,scores)\r\n        return", "start_char_idx": 7596, "end_char_idx": 9089, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "edb0d1ad-abd2-492f-83d7-81ded02bb359": {"__data__": {"id_": "edb0d1ad-abd2-492f-83d7-81ded02bb359", "embedding": null, "metadata": {"file_path": "D:\\Akhil_Main_LLM_Code\\Akhil_Main_LLM_Code\\ASRAG\\pages\\RAG\\code\\app3.py", "file_name": "app3.py", "file_type": "text/x-python", "file_size": 10460, "creation_date": "2024-04-19", "last_modified_date": "2024-04-19"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f629a58b-5884-4f66-9c05-9b0dbde66211", "node_type": "4", "metadata": {"file_path": "D:\\Akhil_Main_LLM_Code\\Akhil_Main_LLM_Code\\ASRAG\\pages\\RAG\\code\\app3.py", "file_name": "app3.py", "file_type": "text/x-python", "file_size": 10460, "creation_date": "2024-04-19", "last_modified_date": "2024-04-19"}, "hash": "92fe818292d1d6713f30fcdd13cddd4b0b55e6cb016b214db2123a3c88a62cd1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9fa4b9a6-1915-4b35-a229-62f3d7f57c9a", "node_type": "1", "metadata": {"file_path": "D:\\Akhil_Main_LLM_Code\\Akhil_Main_LLM_Code\\ASRAG\\pages\\RAG\\code\\app3.py", "file_name": "app3.py", "file_type": "text/x-python", "file_size": 10460, "creation_date": "2024-04-19", "last_modified_date": "2024-04-19"}, "hash": "1e9b9c7ea99e3943677c40880c67132878134d79e46203966b9859c38ae4b7b4", "class_name": "RelatedNodeInfo"}}, "text": "def main():\r\n    print(\"test of scoring functions\")\r\n    MyScore = Score()\r\n    train_q_path=\"../../api_performance/headlines/9_train/1000_perf_questions.json\"\r\n    train_a_path=\"../../api_performance/headlines/9_train/1000_perf_answers.json\"\r\n    train_label_path=\"../../api_performance/headlines/9_train/1000_perf_em_list.txt\"\r\n    train_score_path=\"../../api_performance/headlines/9_train/1000_perf_scores.json\"\r\n\r\n    val_q_path=\"../../api_performance/headlines/9_train/1000_perf_questions.json\"\r\n    val_a_path=\"../../api_performance/headlines/9_train/1000_perf_answers.json\"\r\n    val_label_path=\"../../api_performance/headlines/9_train/1000_perf_em_list.txt\"\r\n    val_score_path=\"../../api_performance/headlines/9_train/1000_perf_scores.json\"\r\n                  \r\n    test_q_path=\"../../api_performance/headlines/9/1000_perf_questions.json\"\r\n    test_a_path=\"../../api_performance/headlines/9/1000_perf_answers.json\"\r\n    test_label_path=\"../../api_performance/headlines/9/1000_perf_em_list.txt\"\r\n    test_score_path=\"../../api_performance/headlines/9/1000_perf_scores.json\"\r\n                  \r\n    MyScore.pipelines(train_q_path, train_a_path, train_label_path, train_score_path, val_q_path, val_a_path, val_label_path, val_score_path, test_q_path, test_a_path, test_label_path, test_score_path)\r\n    return    \r\nif __name__ == \"__main__\":\r\n   main()", "start_char_idx": 9097, "end_char_idx": 10455, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/metadata": {"d3fdd05c-1106-4c47-b71f-36cce41c7f7f": {"doc_hash": "ece8be2efe26089d9ed646fe9e4d88ffebaac22c6334fe5eaaa96c2173696f50", "ref_doc_id": "f629a58b-5884-4f66-9c05-9b0dbde66211"}, "4983416a-ef8c-4da4-a4b2-1f79d1e8e60c": {"doc_hash": "5c86756121d8423986995de9a3244b446b65f42e494e04b6db2de89a1a63cae9", "ref_doc_id": "f629a58b-5884-4f66-9c05-9b0dbde66211"}, "20a2ecb5-5baf-4ab5-a1dd-2713970f1a68": {"doc_hash": "96f5d58b1c308e5b639cd073e30867d3825d20b376af5b30635749e944a9c43f", "ref_doc_id": "f629a58b-5884-4f66-9c05-9b0dbde66211"}, "ca11b5e1-ec17-440b-8d44-84a56e13aa95": {"doc_hash": "97eeb03911ec1b67720985df00698a8e7e68224803b9d879be442bb4b6ae9f32", "ref_doc_id": "f629a58b-5884-4f66-9c05-9b0dbde66211"}, "a5d0f2cf-b82e-4e85-bb6b-0dfa013d9212": {"doc_hash": "1396dbb4a6656ee0346209c3f23e0f7d73f3443cf40ffdfb6adbe3f87e2a3f3d", "ref_doc_id": "f629a58b-5884-4f66-9c05-9b0dbde66211"}, "042d7109-b707-48f8-adc3-b97b70e71664": {"doc_hash": "bbf1d77baa61e937802e0c2c1a28e157c030963b2cb083ecd722bc40e13cfba4", "ref_doc_id": "f629a58b-5884-4f66-9c05-9b0dbde66211"}, "7db12c91-e0c3-451f-9880-55ef46c81830": {"doc_hash": "fe9eba6e9392603e1b52697a42bf4568c95757aef0ecf7074cc187eb2d1dcfab", "ref_doc_id": "f629a58b-5884-4f66-9c05-9b0dbde66211"}, "50e776c4-771e-4a77-bde6-8ec382b0acd2": {"doc_hash": "05e92247de1345c8a31c200fab671eddff28ebcb2b8f995b12bfde8e651d0d7d", "ref_doc_id": "f629a58b-5884-4f66-9c05-9b0dbde66211"}, "bd0d2e59-723b-4176-81f0-f07e44b0474f": {"doc_hash": "9d277cfc9cedd1116f1f8b90bd29e10be8bfd8c85935ad0e5101d5e1741b2bee", "ref_doc_id": "f629a58b-5884-4f66-9c05-9b0dbde66211"}, "9fa4b9a6-1915-4b35-a229-62f3d7f57c9a": {"doc_hash": "1e9b9c7ea99e3943677c40880c67132878134d79e46203966b9859c38ae4b7b4", "ref_doc_id": "f629a58b-5884-4f66-9c05-9b0dbde66211"}, "edb0d1ad-abd2-492f-83d7-81ded02bb359": {"doc_hash": "4afcbd2578278944d51c0e80fcd2d6f39180cde1bee57da31d257a50c2b7d071", "ref_doc_id": "f629a58b-5884-4f66-9c05-9b0dbde66211"}}, "docstore/ref_doc_info": {"f629a58b-5884-4f66-9c05-9b0dbde66211": {"node_ids": ["d3fdd05c-1106-4c47-b71f-36cce41c7f7f", "4983416a-ef8c-4da4-a4b2-1f79d1e8e60c", "20a2ecb5-5baf-4ab5-a1dd-2713970f1a68", "ca11b5e1-ec17-440b-8d44-84a56e13aa95", "a5d0f2cf-b82e-4e85-bb6b-0dfa013d9212", "042d7109-b707-48f8-adc3-b97b70e71664", "7db12c91-e0c3-451f-9880-55ef46c81830", "50e776c4-771e-4a77-bde6-8ec382b0acd2", "bd0d2e59-723b-4176-81f0-f07e44b0474f", "9fa4b9a6-1915-4b35-a229-62f3d7f57c9a", "edb0d1ad-abd2-492f-83d7-81ded02bb359"], "metadata": {"file_path": "D:\\Akhil_Main_LLM_Code\\Akhil_Main_LLM_Code\\ASRAG\\pages\\RAG\\code\\app3.py", "file_name": "app3.py", "file_type": "text/x-python", "file_size": 10460, "creation_date": "2024-04-19", "last_modified_date": "2024-04-19"}}}}